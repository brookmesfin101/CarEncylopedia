@model CarEncylopedia.Main.ViewModels.CompareMakesViewModel

<div class="row">
    <div class="col-9">
        <canvas id="myChart" width="800" height="600"></canvas>
    </div>
    <div class="col-2">
        <p class="lead"><span class="jam jam-filter mr-2"></span>Chart Filters</p>
        
        <div class="form-group row">
            <label for="ChartSort" class="col-5 col-form-label lead">Sort Chart</label>
            @Html.DropDownList("ChartSort", new SelectList(Model.ChartSort), new { @class = "form-control-sm col-5", id = "ChartSortDropDownList" })
        </div>  

        <p class="MakesIncludedToggle"><span class="jam jam-plus mr-2 pl-1"></span>Makes Included</p>
        <div id="MakesIncludedList" class="row no-gutters d-none">
            @for (var i = 0; i < Model.MakeAverages.Count; i++)
            {
                if (i % 2 == 0)
                {
                    <div class="form-check form-check-inline col-6 mr-0">
                        <label for="@Model.MakeAverages[i].Item1" class="form-check-label pr-1">@Model.MakeAverages[i].Item1</label>
                        @Html.CheckBox(Model.MakeAverages[i].Item1, true, new { @class = "form-check-input" })
                    </div>
                }
            }
            @for (var i = 0; i < Model.MakeAverages.Count; i++)
            {
                if (i % 2 != 0)
                {
                    <div class="form-check form-check-inline col-6 mr-0">
                        <label for="@Model.MakeAverages[i].Item1" class="form-check-label pr-1">@Model.MakeAverages[i].Item1</label>
                        @Html.CheckBox(Model.MakeAverages[i].Item1, true, new { @class = "form-check-input" })
                    </div>
                }
            }
        </div>        
    </div>
</div>


<script type="text/javascript">
    var ctx = document.getElementById('myChart').getContext('2d');
    var cars = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MakeAverages))
    var compareOn = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CompareOn))
    
    var makes = [];
    var avgs = [];
    var colors = [];
    var label = `Average ${compareOn} of Car`;    
    
    cars.forEach(el => {
        makes.push(el.Item1);
        avgs.push(el.Item2);
        colors.push(random_rgba());
    })

    function random_rgba() {
        return 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.random().toFixed(1) + ')';
    }

    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: makes,
            datasets: [{
                label: label,
                data: avgs,
                backgroundColor: colors,
                borderColor: 'rgba(0,0,0,.25)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    $(".MakesIncludedToggle").on("click", function () {        
        if ($("#MakesIncludedList").hasClass("d-none") == true) {
            $("#MakesIncludedList").removeClass("d-none");
        } else {
            $("#MakesIncludedList").addClass("d-none");
        }
    })
</script>